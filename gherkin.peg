package gherkin

type gherkinPeg Peg {
  gherkinPegBase

  buf1 string
  buf2 string
  buftags []string
}

Begin <- 
  Feature?
  OS !.

Feature <- 
  Tags 'Feature:' <UntilLineEnd?>{{buf1}} <>{{buf2}} LineEnd
  (WS* !('@' Word / 'Background:' / 'Scenario:' / 'Scenario Outline:') <UntilLineEnd?>{{++buf2}} LineEnd { p.buf2 = p.buf2 + "\n" })*
  { p.beginFeature(trimWS(p.buf1), trimWSML(p.buf2), p.buftags); p.buftags = nil }
  ( Background / Scenario / Outline / BlankLine )*
  { p.endFeature() }

Background <- 
  Tags 'Background:' <UntilLineEnd?>{{buf1}} LineEnd
  { p.beginBackground(trimWS(p.buf1), p.buftags); p.buftags = nil }
  (Step / BlankLine)*
  { p.endBackground() } 

Scenario <- 
  Tags 'Scenario:' <UntilLineEnd?>{{buf1}} LineEnd
  { p.beginScenario(trimWS(p.buf1), p.buftags); p.buftags = nil }
  (Step / BlankLine)*
  { p.endScenario() }

Outline <- 
  Tags 'Scenario Outline:' <UntilLineEnd?>{{buf1}} LineEnd
  { p.beginOutline(trimWS(p.buf1), p.buftags); p.buftags = nil } 
  (Step / BlankLine)*
  OutlineExamples?
  { p.endOutline() } 

OutlineExamples <-
  OS 'Examples:' WS* LineEnd
  { p.beginOutlineExamples() } 
  Table?
  { p.endOutlineExamples() } 

Step <- 
  WS* <('Given' / 'When' / 'Then' / 'And' / 'Or' / 'But')>{{buf1}}
  <UntilLineEnd>{{buf2}} LineEnd
  { p.beginStep(trimWS(p.buf1), trimWS(p.buf2)) } 
  StepArgument?
  { p.endStep() }

StepArgument <-
  Table / PyString

PyString <-
  (WS* NL)* <WS*> PyStringQuote NL
  { p.beginPyString(buffer[begin:end]) }
  (!(WS* PyStringQuote) PyStringLine)*
  WS* PyStringQuote WS* LineEnd
  { p.endPyString() }

PyStringQuote <- '\"' '\"' '\"'

PyStringLine <-
  < UntilNL > NL
  { p.bufferPyString(buffer[begin:end]) }

Table <-
  { p.beginTable() }
  TableRow+
  { p.endTable() }

TableRow <-
  { p.beginTableRow() }
  OS '|' TableCell+ WS* LineEnd
  { p.endTableRow() }

TableCell <-
  <( [^\r\n|]+ )> '|'
  { p.beginTableCell(); p.endTableCell(trimWS(buffer[begin:end])) }

Tags <-
  (Tag+ WS* LineEnd?)* OS

Tag <-
  OS '@' <( Word )>{{[]buftags}}

Word <-
  [^\r\n\t "#]+

EscapedChar <- '\\' . 

QuotedString <- 
  '"' ( EscapedChar / [^\n\\"]+ )* '"'

UntilLineEnd <-
  ( EscapedChar / [^\n\\"#]+ / QuotedString )+

LineEnd <- 
  LineComment? NL

LineComment <- 
  '#' < [^\n]* >
  { p.triggerComment(buffer[begin:end]) }

BlankLine <- 
  WS* LineEnd
  { p.triggerBlankLine() }


OS <- (NL/WS)*

WS <- (' ' / '\t')

UntilNL <- [^\n]*

NL <- '\r'? '\n'

